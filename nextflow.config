/*
================================================================================
    Complete Genotyping Imputation and Ancestry Pipeline - Configuration
================================================================================
    Flexible configuration supporting:
    - Local execution
    - HPC (SLURM, PBS schedulers)
    - Cloud (AWS, Google Cloud, All of Us Researcher Workbench, UK Biobank)
    - Containers: Apptainer/Singularity ONLY
    
    Updates:
    - Uses CrossMap for genome build conversion (not liftOver)
    - Uses TOPMed Freeze 10 PASS variants for strand checking
    - Reference files stored in: resources/references/
================================================================================
*/

// ============================================================================
// PIPELINE PARAMETERS
// ============================================================================

params {
    // ========== REQUIRED INPUTS ==========
    sample_sheet = null                         // TSV: platform_id, file_path, file_type, build, batch
    input_build = 'hg19'                        // Input genome build: 'hg19' or 'hg38'
    
    // ========== OUTPUT ==========
    outdir = './results'                        // Output directory
    
    // ========== MODULE CONTROL ==========
    skip_modules = ""                           // Comma-separated modules to skip (e.g., "5,7")
    
    // ========== REFERENCE FILES (MODULE 1) ==========
    // Stored in resources/references/ directory in GitHub repo
    
    reference_fasta = null                      // Human reference genome (hg38.fa)
                                                // Download: http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/
    
    // CrossMap for genome build conversion (replaces liftOver)
    crossmap_chain = "${projectDir}/resources/references/hg19ToHg38.over.chain.gz"
                                                // hg19 to hg38 chain file
                                                // Download: http://hgdownload.soe.ucsc.edu/goldenPath/hg19/liftOver/
    
    // TOPMed Freeze 10 PASS variants (Will Rayner format v4.3.0)
    topmed_freeze10_pass = "${projectDir}/resources/references/PASS_Variants_TOPMed_Freeze10_b38.txt.gz"
                                                // TOPMed Freeze 10 PASS variants
                                                // Format: Will Rayner HRC/TOPMed format with PASS flags
                                                // Download: https://www.well.ox.ac.uk/~wrayner/strand/
                                                // OR generate from Freeze 10 VCFs
    
    // Modified Will Rayner-style strand checking script (in your repo)
    strand_check_script = "${projectDir}/bin/check_strand_topmed.pl"
                                                // Custom strand checking script
                                                // Uses TOPMed Freeze 10 PASS variants
    
    // ========== IMPUTATION SERVICES (MODULES 2 & 5) ==========
    run_topmed = true                           // Run TOPMed imputation
    run_anvil = false                           // Run All of Us AnVIL imputation
    
    // TOPMed credentials
    topmed_api_token = null                     // TOPMed API token (from profile)
    topmed_password = null                      // Download password (from imputation email)
    topmed_server = 'https://imputation.biodatacatalyst.nhlbi.nih.gov'
    
    // All of Us AnVIL credentials
    anvil_workspace = null                      // Terra workspace name
    anvil_project = null                        // Google Cloud project
    anvil_bucket = null                         // GCS bucket for data transfer
    
    // ========== QC PARAMETERS (MODULES 3 & 6) ==========
    rsq_cutoff = 0.3                            // RÂ² cutoff for imputation quality
    maf_cutoff = 0.01                           // Minor allele frequency cutoff
    geno_cutoff = 0.02                          // Missing genotype rate cutoff
    mind_cutoff = 0.02                          // Per-sample missing rate cutoff
    hwe_cutoff = 1e-6                           // Hardy-Weinberg equilibrium p-value
    
    // Heterozygosity filters
    het_sd_threshold = 3.0                      // SD threshold for heterozygosity outliers
    
    // Relatedness
    use_genesis = true                          // Use GENESIS PCRelate (true) or PLINK (false)
    kinship_cutoff = 0.0884                     // Kinship coefficient cutoff (3rd degree)
    
    // ========== ANCESTRY PARAMETERS (MODULE 7) ==========
    reference_panel = null                      // Ancestry reference panel (.rds)
    genetic_map = null                          // Directory with genetic maps for RFMix
    rfmix_script = null                         // RFMix execution script
    admixture_k = "5,6,7"                       // K values for ADMIXTURE
    
    // ========== COMPUTE RESOURCES ==========
    max_cpus = 32                               // Maximum CPUs per process
    max_memory = '128.GB'                       // Maximum memory per process
    max_time = '240.h'                          // Maximum time per process
    
    // ========== CONTAINER SETTINGS ==========
    container_cache = './apptainer_cache'       // Local cache for Apptainer images
}

// ============================================================================
// APPTAINER/SINGULARITY CONFIGURATION
// ============================================================================
// Apptainer is the successor to Singularity and is compatible with both names
// This works on HPC, cloud, and biobank platforms

apptainer {
    enabled = true
    autoMounts = true
    cacheDir = params.container_cache
    runOptions = '--containall --cleanenv'      // Isolate container environment
}

// Fallback for systems still using "singularity" name
singularity {
    enabled = true
    autoMounts = true
    cacheDir = params.container_cache
    runOptions = '--containall --cleanenv'
}

// ============================================================================
// PROCESS RESOURCE LABELS
// ============================================================================
// Each process is labeled with resource requirements
// These can be overridden by profiles

process {
    // Default resources
    cpus = 1
    memory = '4.GB'
    time = '4.h'
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 3
    
    // ========== CONTAINER IMAGES (APPTAINER) ==========
    // Using Docker URIs that Apptainer can convert automatically
    // Apptainer pulls from Docker Hub and converts to SIF format
    
    withLabel: 'plink|plink_merge|plink_large' {
        container = 'docker://quay.io/biocontainers/plink:1.90b6.21--h779adbc_1'
    }
    
    withLabel: 'bcftools' {
        container = 'docker://quay.io/biocontainers/bcftools:1.17--haef29d1_0'
    }
    
    withLabel: 'R' {
        container = 'docker://rocker/tidyverse:4.3.1'
    }
    
    // CrossMap for genome build conversion
    withLabel: 'crossmap' {
        container = 'docker://quay.io/biocontainers/crossmap:0.6.4--pyhdfd78af_0'
    }
    
    withLabel: 'admixture' {
        container = 'docker://quay.io/biocontainers/admixture:1.3.0--h031d066_3'
    }
    
    withLabel: 'perl|download|validation|manifest|api|preqc|strand_check' {
        container = 'docker://perl:5.32'
    }
    
    withLabel: 'ancestry' {
        container = 'docker://rocker/tidyverse:4.3.1'
    }
    
    withLabel: 'rfmix' {
        container = 'docker://quay.io/biocontainers/rfmix:2.03--h8b12597_0'
    }
    
    // Python for general scripts
    withLabel: 'python' {
        container = 'docker://python:3.10-slim'
    }
    
    // ========== RESOURCE ALLOCATIONS BY LABEL ==========
    
    // Pre-imputation QC
    withLabel: 'preqc' {
        cpus = 4
        memory = '16.GB'
        time = '8.h'
    }
    
    // CrossMap genome build conversion
    withLabel: 'crossmap' {
        cpus = 2
        memory = '8.GB'
        time = '6.h'
    }
    
    // Strand checking
    withLabel: 'strand_check' {
        cpus = 2
        memory = '8.GB'
        time = '4.h'
    }
    
    // PLINK operations (standard)
    withLabel: 'plink' {
        cpus = 4
        memory = '16.GB'
        time = '8.h'
    }
    
    // PLINK merge (memory intensive)
    withLabel: 'plink_merge' {
        cpus = 8
        memory = '32.GB'
        time = '12.h'
    }
    
    // Large PLINK operations
    withLabel: 'plink_large' {
        cpus = 16
        memory = '64.GB'
        time = '24.h'
    }
    
    // R statistical analyses
    withLabel: 'R' {
        cpus = 4
        memory = '16.GB'
        time = '8.h'
    }
    
    // BCFtools (VCF manipulation)
    withLabel: 'bcftools' {
        cpus = 4
        memory = '16.GB'
        time = '8.h'
    }
    
    // Download processes
    withLabel: 'download' {
        cpus = 1
        memory = '4.GB'
        time = '72.h'
        maxRetries = 5
    }
    
    // API calls (imputation submission/monitoring)
    withLabel: 'api' {
        cpus = 1
        memory = '4.GB'
        time = '24.h'
        maxRetries = 100
    }
    
    // Ancestry estimation
    withLabel: 'ancestry' {
        cpus = 8
        memory = '32.GB'
        time = '12.h'
    }
    
    withLabel: 'admixture' {
        cpus = 4
        memory = '16.GB'
        time = '24.h'
    }
    
    withLabel: 'rfmix' {
        cpus = 8
        memory = '24.GB'
        time = '48.h'
    }
    
    // Small utility processes
    withLabel: 'validation|manifest' {
        cpus = 1
        memory = '2.GB'
        time = '1.h'
    }
}

// ============================================================================
// EXECUTION PROFILES
// ============================================================================

profiles {
    
    // ========== LOCAL EXECUTION ==========
    // For testing on your laptop/workstation
    local {
        process.executor = 'local'
        process.cpus = { Math.min(4, params.max_cpus) }
        process.memory = { Math.min(16.GB, params.max_memory as nextflow.util.MemoryUnit) }
    }
    
    // ========== SLURM (HPC) ==========
    // For SLURM-based HPC clusters
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'                    // Change to your partition name
            
            // Example cluster options - customize for your HPC
            // clusterOptions = '--account=YOUR_ACCOUNT'
            // clusterOptions = '--account=YOUR_ACCOUNT --qos=normal'
            
            // Large memory jobs go to special partition (optional)
            withLabel: 'plink_large|rfmix' {
                queue = 'largemem'              // Change to your high-mem partition
                // clusterOptions = '--account=YOUR_ACCOUNT --qos=largemem'
            }
        }
    }
    
    // ========== PBS/TORQUE (HPC) ==========
    // For PBS/Torque-based HPC clusters
    pbs {
        process {
            executor = 'pbs'
            queue = 'workq'                     // Change to your queue name
            
            // Example cluster options - customize for your HPC
            // clusterOptions = '-A YOUR_ACCOUNT'
            // clusterOptions = '-A YOUR_ACCOUNT -l walltime=24:00:00'
            
            // Large memory jobs
            withLabel: 'plink_large|rfmix' {
                queue = 'bigmem'                // Change to your high-mem queue
            }
        }
    }
    
    // ========== ALL OF US RESEARCHER WORKBENCH ==========
    // For All of Us AnVIL/Terra platform
    aou {
        process {
            executor = 'google-lifesciences'
            
            // All of Us uses Google Cloud
            google.location = 'us-central1'
            google.project = params.anvil_project
            
            // Use preemptible instances to save costs
            google.lifeSciences.preemptible = true
            
            // Network configuration for All of Us
            google.lifeSciences.network = 'network'
            google.lifeSciences.subnetwork = 'subnetwork'
        }
        
        // All of Us provides these automatically
        google.lifeSciences.bootDiskSize = '50.GB'
    }
    
    // ========== GOOGLE CLOUD (GENERIC) ==========
    // For general Google Cloud Platform use
    gcp {
        process {
            executor = 'google-lifesciences'
            
            // Customize these for your GCP project
            google.location = 'us-central1'     // Change region as needed
            google.project = 'YOUR_GCP_PROJECT' // Set your project ID
            
            // Use preemptible instances to save costs (optional)
            google.lifeSciences.preemptible = true
        }
        
        workDir = 'gs://YOUR_BUCKET/work'       // Set your GCS bucket
        google.lifeSciences.bootDiskSize = '50.GB'
    }
    
    // ========== AWS BATCH ==========
    // For Amazon Web Services Batch
    aws {
        process {
            executor = 'awsbatch'
            queue = 'YOUR_AWS_BATCH_QUEUE'      // Set your AWS Batch queue
            
            // AWS region
            aws.region = 'us-east-1'            // Change as needed
            aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
        }
        
        workDir = 's3://YOUR_BUCKET/work'       // Set your S3 bucket
    }
    
    // ========== UK BIOBANK RESEARCH ANALYSIS PLATFORM ==========
    // For UK Biobank RAP (DNAnexus platform)
    ukb {
        process {
            executor = 'local'                  // UK Biobank RAP uses local executor
            
            // UK Biobank RAP specific settings
            // Jobs run on DNAnexus workers which handle scheduling
            cpus = { Math.min(task.cpus, 32) }
            memory = { Math.min(task.memory, 128.GB as nextflow.util.MemoryUnit) }
        }
        
        // UK Biobank uses project storage
        workDir = '/mnt/project/work'
    }
    
    // ========== TESTING PROFILE ==========
    // Reduced resources for quick testing
    test {
        process {
            executor = 'local'
            cpus = 2
            memory = '8.GB'
            time = '2.h'
            
            withLabel: 'plink_large' {
                cpus = 4
                memory = '16.GB'
            }
        }
        
        params {
            max_cpus = 4
            max_memory = '16.GB'
        }
    }
}

// ============================================================================
// REPORTING
// ============================================================================

report {
    enabled = true
    file = "${params.outdir}/reports/execution_report.html"
    overwrite = true
}

timeline {
    enabled = true
    file = "${params.outdir}/reports/timeline_report.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${params.outdir}/reports/trace.txt"
    overwrite = true
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

dag {
    enabled = true
    file = "${params.outdir}/reports/pipeline_dag.html"
    overwrite = true
}

// ============================================================================
// MANIFEST
// ============================================================================

manifest {
    name = 'Complete Genotyping Imputation & Ancestry Pipeline'
    author = 'Your Name'
    description = 'End-to-end pipeline for multi-platform genotyping: QC, imputation (TOPMed/All of Us), merging, and ancestry estimation. Uses CrossMap for build conversion and TOPMed Freeze 10 PASS variants (Will Rayner format v4.3.0) for strand checking.'
    mainScript = 'main.nf'
    nextflowVersion = '>=23.04.0'
    version = '1.0.0'
    homePage = 'https://github.com/your-repo/imputation-pipeline'
}

// ============================================================================
// CLEANUP
// ============================================================================

cleanup = false  // Set to true to delete work directory after successful completion
